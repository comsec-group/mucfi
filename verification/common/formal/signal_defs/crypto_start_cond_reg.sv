// Generated by gen_checker_inst.py
bit taint_start_cond_SHA512SIG1L_op1;
assign taint_start_cond_SHA512SIG1L_op1 = cpuregs_rs1_start_cond && SHA512SIG1L();

bit taint_start_cond_SHA512SIG1L_op2;
assign taint_start_cond_SHA512SIG1L_op2 = cpuregs_rs2_start_cond && SHA512SIG1L();

bit taint_start_cond_AES32DSI_op1;
assign taint_start_cond_AES32DSI_op1 = cpuregs_rs1_start_cond && AES32DSI();

bit taint_start_cond_AES32DSI_op2;
assign taint_start_cond_AES32DSI_op2 = cpuregs_rs2_start_cond && AES32DSI();

bit taint_start_cond_SM4ED_op1;
assign taint_start_cond_SM4ED_op1 = cpuregs_rs1_start_cond && SM4ED();

bit taint_start_cond_SM4ED_op2;
assign taint_start_cond_SM4ED_op2 = cpuregs_rs2_start_cond && SM4ED();

bit taint_start_cond_SHA512SUM1_op1;
assign taint_start_cond_SHA512SUM1_op1 = cpuregs_rs1_start_cond && SHA512SUM1();

bit taint_start_cond_AES32ESI_op1;
assign taint_start_cond_AES32ESI_op1 = cpuregs_rs1_start_cond && AES32ESI();

bit taint_start_cond_AES32ESI_op2;
assign taint_start_cond_AES32ESI_op2 = cpuregs_rs2_start_cond && AES32ESI();

bit taint_start_cond_SHA512SUM1R_op1;
assign taint_start_cond_SHA512SUM1R_op1 = cpuregs_rs1_start_cond && SHA512SUM1R();

bit taint_start_cond_SHA512SUM1R_op2;
assign taint_start_cond_SHA512SUM1R_op2 = cpuregs_rs2_start_cond && SHA512SUM1R();

bit taint_start_cond_SHA512SIG0L_op1;
assign taint_start_cond_SHA512SIG0L_op1 = cpuregs_rs1_start_cond && SHA512SIG0L();

bit taint_start_cond_SHA512SIG0L_op2;
assign taint_start_cond_SHA512SIG0L_op2 = cpuregs_rs2_start_cond && SHA512SIG0L();

bit taint_start_cond_SM3P1_op1;
assign taint_start_cond_SM3P1_op1 = cpuregs_rs1_start_cond && SM3P1();

bit taint_start_cond_SM3P0_op1;
assign taint_start_cond_SM3P0_op1 = cpuregs_rs1_start_cond && SM3P0();

bit taint_start_cond_AES64ES_op1;
assign taint_start_cond_AES64ES_op1 = cpuregs_rs1_start_cond && AES64ES();

bit taint_start_cond_AES64ES_op2;
assign taint_start_cond_AES64ES_op2 = cpuregs_rs2_start_cond && AES64ES();

bit taint_start_cond_SHA256SIG1_op1;
assign taint_start_cond_SHA256SIG1_op1 = cpuregs_rs1_start_cond && SHA256SIG1();

bit taint_start_cond_AES64IM_op1;
assign taint_start_cond_AES64IM_op1 = cpuregs_rs1_start_cond && AES64IM();

bit taint_start_cond_SHA512SUM0R_op1;
assign taint_start_cond_SHA512SUM0R_op1 = cpuregs_rs1_start_cond && SHA512SUM0R();

bit taint_start_cond_SHA512SUM0R_op2;
assign taint_start_cond_SHA512SUM0R_op2 = cpuregs_rs2_start_cond && SHA512SUM0R();

bit taint_start_cond_AES32DSMI_op1;
assign taint_start_cond_AES32DSMI_op1 = cpuregs_rs1_start_cond && AES32DSMI();

bit taint_start_cond_AES32DSMI_op2;
assign taint_start_cond_AES32DSMI_op2 = cpuregs_rs2_start_cond && AES32DSMI();

bit taint_start_cond_SHA512SUM0_op1;
assign taint_start_cond_SHA512SUM0_op1 = cpuregs_rs1_start_cond && SHA512SUM0();

bit taint_start_cond_SHA512SIG0_op1;
assign taint_start_cond_SHA512SIG0_op1 = cpuregs_rs1_start_cond && SHA512SIG0();

bit taint_start_cond_AES64ESM_op1;
assign taint_start_cond_AES64ESM_op1 = cpuregs_rs1_start_cond && AES64ESM();

bit taint_start_cond_AES64ESM_op2;
assign taint_start_cond_AES64ESM_op2 = cpuregs_rs2_start_cond && AES64ESM();

bit taint_start_cond_AES64KS1I_op1;
assign taint_start_cond_AES64KS1I_op1 = cpuregs_rs1_start_cond && AES64KS1I();

bit taint_start_cond_AES64KS2_op1;
assign taint_start_cond_AES64KS2_op1 = cpuregs_rs1_start_cond && AES64KS2();

bit taint_start_cond_AES64KS2_op2;
assign taint_start_cond_AES64KS2_op2 = cpuregs_rs2_start_cond && AES64KS2();

bit taint_start_cond_SHA256SIG0_op1;
assign taint_start_cond_SHA256SIG0_op1 = cpuregs_rs1_start_cond && SHA256SIG0();

bit taint_start_cond_AES64DSM_op1;
assign taint_start_cond_AES64DSM_op1 = cpuregs_rs1_start_cond && AES64DSM();

bit taint_start_cond_AES64DSM_op2;
assign taint_start_cond_AES64DSM_op2 = cpuregs_rs2_start_cond && AES64DSM();

bit taint_start_cond_AES64DS_op1;
assign taint_start_cond_AES64DS_op1 = cpuregs_rs1_start_cond && AES64DS();

bit taint_start_cond_AES64DS_op2;
assign taint_start_cond_AES64DS_op2 = cpuregs_rs2_start_cond && AES64DS();

bit taint_start_cond_SHA512SIG0H_op1;
assign taint_start_cond_SHA512SIG0H_op1 = cpuregs_rs1_start_cond && SHA512SIG0H();

bit taint_start_cond_SHA512SIG0H_op2;
assign taint_start_cond_SHA512SIG0H_op2 = cpuregs_rs2_start_cond && SHA512SIG0H();

bit taint_start_cond_SHA256SUM0_op1;
assign taint_start_cond_SHA256SUM0_op1 = cpuregs_rs1_start_cond && SHA256SUM0();

bit taint_start_cond_SHA512SIG1H_op1;
assign taint_start_cond_SHA512SIG1H_op1 = cpuregs_rs1_start_cond && SHA512SIG1H();

bit taint_start_cond_SHA512SIG1H_op2;
assign taint_start_cond_SHA512SIG1H_op2 = cpuregs_rs2_start_cond && SHA512SIG1H();

bit taint_start_cond_SHA512SIG1_op1;
assign taint_start_cond_SHA512SIG1_op1 = cpuregs_rs1_start_cond && SHA512SIG1();

bit taint_start_cond_SM4KS_op1;
assign taint_start_cond_SM4KS_op1 = cpuregs_rs1_start_cond && SM4KS();

bit taint_start_cond_SM4KS_op2;
assign taint_start_cond_SM4KS_op2 = cpuregs_rs2_start_cond && SM4KS();

bit taint_start_cond_SHA256SUM1_op1;
assign taint_start_cond_SHA256SUM1_op1 = cpuregs_rs1_start_cond && SHA256SUM1();

bit taint_start_cond_AES32ESMI_op1;
assign taint_start_cond_AES32ESMI_op1 = cpuregs_rs1_start_cond && AES32ESMI();

bit taint_start_cond_AES32ESMI_op2;
assign taint_start_cond_AES32ESMI_op2 = cpuregs_rs2_start_cond && AES32ESMI();

