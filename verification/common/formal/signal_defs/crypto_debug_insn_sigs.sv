// Generated by gen_checker_inst.py
bit is_SHA512SIG1L;
assign is_SHA512SIG1L = SHA512SIG1L();

bit is_AES32DSI;
assign is_AES32DSI = AES32DSI();

bit is_SM4ED;
assign is_SM4ED = SM4ED();

bit is_SHA512SUM1;
assign is_SHA512SUM1 = SHA512SUM1();

bit is_AES32ESI;
assign is_AES32ESI = AES32ESI();

bit is_SHA512SUM1R;
assign is_SHA512SUM1R = SHA512SUM1R();

bit is_SHA512SIG0L;
assign is_SHA512SIG0L = SHA512SIG0L();

bit is_SM3P1;
assign is_SM3P1 = SM3P1();

bit is_SM3P0;
assign is_SM3P0 = SM3P0();

bit is_AES64ES;
assign is_AES64ES = AES64ES();

bit is_SHA256SIG1;
assign is_SHA256SIG1 = SHA256SIG1();

bit is_AES64IM;
assign is_AES64IM = AES64IM();

bit is_SHA512SUM0R;
assign is_SHA512SUM0R = SHA512SUM0R();

bit is_AES32DSMI;
assign is_AES32DSMI = AES32DSMI();

bit is_SHA512SUM0;
assign is_SHA512SUM0 = SHA512SUM0();

bit is_SHA512SIG0;
assign is_SHA512SIG0 = SHA512SIG0();

bit is_AES64ESM;
assign is_AES64ESM = AES64ESM();

bit is_AES64KS1I;
assign is_AES64KS1I = AES64KS1I();

bit is_AES64KS2;
assign is_AES64KS2 = AES64KS2();

bit is_SHA256SIG0;
assign is_SHA256SIG0 = SHA256SIG0();

bit is_AES64DSM;
assign is_AES64DSM = AES64DSM();

bit is_AES64DS;
assign is_AES64DS = AES64DS();

bit is_SHA512SIG0H;
assign is_SHA512SIG0H = SHA512SIG0H();

bit is_SHA256SUM0;
assign is_SHA256SUM0 = SHA256SUM0();

bit is_SHA512SIG1H;
assign is_SHA512SIG1H = SHA512SIG1H();

bit is_SHA512SIG1;
assign is_SHA512SIG1 = SHA512SIG1();

bit is_SM4KS;
assign is_SM4KS = SM4KS();

bit is_SHA256SUM1;
assign is_SHA256SUM1 = SHA256SUM1();

bit is_AES32ESMI;
assign is_AES32ESMI = AES32ESMI();

